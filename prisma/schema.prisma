// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["napi"]
}

enum PaymentGateway {
  STRIPE
  PADDLE
}

model Team {
  id                   String                @id @default(cuid())
  name                 String?
  description          String?
  picture              String?
  isActive             Boolean?              @default(true)
  settings             Json?                 @db.Json
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userTeams            UserTeam[]
  paymentProfile       PaymentProfile?
  paymentSubscriptions PaymentSubscription[]
  paymentInvoices      PaymentInvoice[]
  paymentPlans         PaymentPlan[]
}

model PaymentPlan {
  id                   String                @id @default(cuid())
  name                 String                @unique
  isActive             Boolean?              @default(true)
  description          String?
  features             String[]
  team                 Team?                 @relation(fields: [teamId], references: [id])
  teamId               String?
  gatewayId            String
  price                Decimal               @db.Decimal(15, 6)
  period               Int
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  paymentSubscriptions PaymentSubscription[]
}

model PaymentProfile {
  id           String         @id @default(cuid())
  team         Team           @relation(fields: [teamId], references: [id])
  teamId       String
  gatewayId    String
  gateway      PaymentGateway
  cardBrand    String?
  cardLastFour String?        @db.VarChar(4)
  trailEndsAt  DateTime
  meta         Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model PaymentSubscription {
  id            String           @id @default(cuid())
  team          Team             @relation(fields: [teamId], references: [id])
  teamId        String
  name          String
  plan          PaymentPlan      @relation(fields: [paymentPlanId], references: [id])
  paymentPlanId String
  gatewayId     String
  gatewayStatus String
  gatewayPlan   String?
  trailEndsAt   DateTime?
  endsAt        DateTime?
  meta          Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  invoices      PaymentInvoice[]

  @@index([teamId, gatewayStatus])
}

model PaymentInvoice {
  id                    String              @id @default(cuid())
  team                  Team                @relation(fields: [teamId], references: [id])
  teamId                String
  subscription          PaymentSubscription @relation(fields: [paymentSubscriptionId], references: [id])
  gatewayId             String
  amountPaid            Decimal
  invoiceUrl            String?
  meta                  Json?
  paymentSubscriptionId String
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userTeams   UserTeam[]
}

model User {
  id         String     @id @default(cuid())
  firstName  String?
  lastName   String?
  email      String     @unique
  password   String
  picture    String?
  isVerified Boolean?   @default(false)
  isActive   Boolean?   @default(true)
  settings   Json?      @db.Json
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userkeys   UserKey[]
  userTeams  UserTeam[]
}

model UserTeam {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  isActive  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, teamId])
}

model UserKey {
  id        String    @id @default(cuid())
  key       String
  type      String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
  expiresAt DateTime?
  userId    String
}
